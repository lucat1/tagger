pub use sqlx_migrate :: prelude :: * ; # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [doc = "Created at 20220910124957."] pub mod _1_init_migrate { } # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [doc = "Created at 20220910124957."] pub mod _1_init_revert { } # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [doc = "Created at 20221229142000."] pub mod _2_artist_group_table_migrate { } # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [doc = "Created at 20221229142000."] pub mod _2_artist_group_table_revert { } # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_credit.migrate.rs"] # [doc = "Created at 20221229142045."] pub mod _3_artist_credit_migrate ; # [doc (inline)] pub use _3_artist_credit_migrate :: * ; # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_credit.revert.rs"] # [doc = "Created at 20221229142045."] pub mod _3_artist_credit_revert ; # [doc (inline)] pub use _3_artist_credit_revert :: * ; # [allow (dead_code)] # [allow (clippy :: all , clippy :: pedantic)] # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_group.migrate.rs"] # [doc = "Created at 20221229142045."] pub mod _4_artist_group_migrate ; # [doc (inline)] pub use _4_artist_group_migrate :: * ; # [doc = r" All the migrations."] pub fn migrations () -> impl IntoIterator < Item = Migration < sqlx :: Sqlite >> { [sqlx_migrate :: Migration :: new ("init" , | ctx | std :: boxed :: Box :: pin (async move { use sqlx :: Executor ; let mut ctx : sqlx_migrate :: prelude :: MigrationContext < sqlx :: Sqlite > = ctx ; ctx . tx () . execute (include_str ! ("/home/luca/github/tagger/migrations/20220910124957_init.migrate.sql")) . await ? ; Ok (()) })) . reversible (| ctx | std :: boxed :: Box :: pin (async move { use sqlx :: Executor ; let mut ctx : sqlx_migrate :: prelude :: MigrationContext < sqlx :: Sqlite > = ctx ; ctx . tx () . execute (include_str ! ("/home/luca/github/tagger/migrations/20220910124957_init.revert.sql")) . await ? ; Ok (()) })) , sqlx_migrate :: Migration :: new ("artist_group_table" , | ctx | std :: boxed :: Box :: pin (async move { use sqlx :: Executor ; let mut ctx : sqlx_migrate :: prelude :: MigrationContext < sqlx :: Sqlite > = ctx ; ctx . tx () . execute (include_str ! ("/home/luca/github/tagger/migrations/20221229142000_artist_group_table.migrate.sql")) . await ? ; Ok (()) })) . reversible (| ctx | std :: boxed :: Box :: pin (async move { use sqlx :: Executor ; let mut ctx : sqlx_migrate :: prelude :: MigrationContext < sqlx :: Sqlite > = ctx ; ctx . tx () . execute (include_str ! ("/home/luca/github/tagger/migrations/20221229142000_artist_group_table.revert.sql")) . await ? ; Ok (()) })) , sqlx_migrate :: Migration :: new ("artist_credit" , | ctx | std :: boxed :: Box :: pin (async move { # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_credit.migrate.rs"] mod artist_credit ; artist_credit :: artist_credit (ctx) . await ? ; Ok (()) })) . reversible (| ctx | std :: boxed :: Box :: pin (async move { # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_credit.revert.rs"] mod revert_artist_credit ; revert_artist_credit :: revert_artist_credit (ctx) . await ? ; Ok (()) })) , sqlx_migrate :: Migration :: new ("artist_group" , | ctx | std :: boxed :: Box :: pin (async move { # [path = "/home/luca/github/tagger/migrations/20221229142045_artist_group.migrate.rs"] mod artist_group ; artist_group :: artist_group (ctx) . await ? ; Ok (()) })) ,] }